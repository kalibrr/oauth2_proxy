## OAuth2 Proxy Config File
## https://github.com/bitly/oauth2_proxy

## <addr>:<port> to listen on for HTTP/HTTPS clients

# http_address = "127.0.0.1:4180"
{{ if .Env.HTTP_ADDRESS }}
http_address = "{{ .Env.HTTP_ADDRESS }}"
{{ end }}

# https_address = ":443"
{{ if .Env.HTTPS_ADDRESS }}
https_address = "{{ .Env.HTTPS_ADDRESS }}"
{{ end }}

## TLS Settings

# tls_cert_file = ""
{{ if .Env.TLS_CERT_FILE }}
tls_cert_file = "{{ .Env.TLS_CERT_FILE }}"
{{ end }}

# tls_key_file = ""
{{ if .Env.TLS_KEY_FILE }}
tls_key_file = "{{ .Env.TLS_KEY_FILE }}"
{{ end }}

## the OAuth Redirect URL.

# defaults to the "https://" + requested host header + "/oauth2/callback"
{{ if .Env.DEFAULTS }}
defaults = "{{ .Env.DEFAULTS }}"
{{ end }}

# redirect_url = "https://internalapp.yourcompany.com/oauth2/callback"
{{ if .Env.REDIRECT_URL }}
redirect_url = "{{ .Env.REDIRECT_URL }}"
{{ end }}

## the http url(s) of the upstream endpoint. If multiple, routing is based on path

# upstreams = ["http://127.0.0.1:8080/"]
{{ if .Env.UPSTREAMS }}
upstreams = {{ .Env.UPSTREAMS }}
{{ end }}

## Log requests to stdout

# request_logging = true
{{ if .Env.REQUEST_LOGGING }}
request_logging = {{ .Env.REQUEST_LOGGING }}
{{ end }}

## pass HTTP Basic Auth, X-Forwarded-User and X-Forwarded-Email information to upstream

# pass_basic_auth = true
{{ if .Env.PASS_BASIC_AUTH }}
pass_basic_auth = {{ .Env.PASS_BASIC_AUTH }}
{{ end }}

# pass_user_headers = true
{{ if .Env.PASS_USER_HEADERS }}
pass_user_headers = {{ .Env.PASS_USER_HEADERS }}
{{ end }}
## pass the request Host Header to upstream
## when disabled the upstream Host is used as the Host Header

# pass_host_header = true
{{ if .Env.PASS_HOST_HEADER }}
pass_host_header = {{ .Env.PASS_HOST_HEADER }}
{{ end }}

# set_xauthrequest = ""
{{ if .Env.SET_XAUTHREQUEST }}
set_xauthrequest = "{{ .Env.SET_XAUTHREQUEST }}"
{{ end }}

# skip_auth_preflight = ""
{{ if .Env.SKIP_AUTH_PREFLIGHT }}
skip_auth_preflight = "{{ .Env.SKIP_AUTH_PREFLIGHT }}"
{{ end }}

## Email Domains to allow authentication for (this authorizes any email on this domain)
## for more granular authorization use `authenticated_emails_file`
## To authorize any email addresses use "*"

# email_domains = ["yourcompany.com"]
{{ if .Env.EMAIL_DOMAINS }}
email_domains = {{ .Env.EMAIL_DOMAINS }}
{{ end }}

## The OAuth Client ID, Secret

# client_id = "123456.apps.googleusercontent.com"
{{ if .Env.CLIENT_ID }}
client_id = "{{ .Env.CLIENT_ID }}"
{{ end }}

# client_secret = ""
{{ if .Env.CLIENT_SECRET }}
client_secret = "{{ .Env.CLIENT_SECRET }}"
{{ end }}

## Pass OAuth Access token to upstream via "X-Forwarded-Access-Token"

# pass_access_token = false
{{ if .Env.PASS_ACCESS_TOKEN }}
pass_access_token = {{ .Env.PASS_ACCESS_TOKEN }}
{{ end }}

## Authenticated Email Addresses File (one email per line)

# authenticated_emails_file = ""
{{ if .Env.AUTHENTICATED_EMAILS_FILE }}
authenticated_emails_file = "{{ .Env.AUTHENTICATED_EMAILS_FILE }}"
{{ end }}

## Htpasswd File (optional)
## Additionally authenticate against a htpasswd file. Entries must be created with "htpasswd -s" for SHA encryption
## enabling exposes a username/login signin form

# htpasswd_file = ""
{{ if .Env.HTPASSWD_FILE }}
htpasswd_file = "{{ .Env.HTPASSWD_FILE }}"
{{ end }}

## Templates
## optional directory with custom sign_in.html and error.html

# custom_templates_dir = ""
{{ if .Env.CUSTOM_TEMPLATES_DIR }}
custom_templates_dir = "{{ .Env.CUSTOM_TEMPLATES_DIR }}"
{{ end }}

## skip SSL checking for HTTPS requests

# ssl_insecure_skip_verify = false
{{ if .Env.SSL_INSECURE_SKIP_VERIFY }}
ssl_insecure_skip_verify = {{ .Env.SSL_INSECURE_SKIP_VERIFY }}
{{ end }}


## Cookie Settings
## Name     - the cookie name
## Secret   - the seed string for secure cookies; should be 16, 24, or 32 bytes
##            for use with an AES cipher when cookie_refresh or pass_access_token
##            is set
## Domain   - (optional) cookie domain to force cookies to (ie: .yourcompany.com)
## Expire   - (duration) expire timeframe for cookie
## Refresh  - (duration) refresh the cookie when duration has elapsed after cookie was initially set.
##            Should be less than cookie_expire; set to 0 to disable.
##            On refresh, OAuth token is re-validated.
##            (ie: 1h means tokens are refreshed on request 1hr+ after it was set)
## Secure   - secure cookies are only sent by the browser of a HTTPS connection (recommended)
## HttpOnly - httponly cookies are not readable by javascript (recommended)

# cookie_name = "_oauth2_proxy"
{{ if .Env.COOKIE_NAME }}
cookie_name = "{{ .Env.COOKIE_NAME }}"
{{ end }}

# cookie_secret = ""
{{ if .Env.COOKIE_SECRET }}
cookie_secret = "{{ .Env.COOKIE_SECRET }}"
{{ end }}

# cookie_domain = ""
{{ if .Env.COOKIE_DOMAIN }}
cookie_domain = "{{ .Env.COOKIE_DOMAIN }}"
{{ end }}

# cookie_expire = "168h"
{{ if .Env.COOKIE_EXPIRE }}
cookie_expire = "{{ .Env.COOKIE_EXPIRE }}"
{{ end }}

# cookie_refresh = ""
{{ if .Env.COOKIE_REFRESH }}
cookie_refresh = "{{ .Env.COOKIE_REFRESH }}"
{{ end }}

# cookie_secure = true
{{ if .Env.COOKIE_SECURE }}
cookie_secure = {{ .Env.COOKIE_SECURE }}
{{ end }}

# cookie_httponly = true
{{ if .Env.COOKIE_HTTPONLY }}
cookie_httponly = {{ .Env.COOKIE_HTTPONLY }}
{{ end }}


# provider = "google"
{{ if .Env.PROVIDER }}
provider = "{{ .Env.PROVIDER }}"
{{ end }}

# oidc_issuer_url = ""
{{ if .Env.OIDC_ISSUER_URL }}
oidc_issuer_url = "{{ .Env.OIDC_ISSUER_URL }}"
{{ end }}

# login_url = ""
{{ if .Env.LOGIN_URL }}
login_url = "{{ .Env.LOGIN_URL }}"
{{ end }}

# redeem_url = ""
{{ if .Env.REDEEM_URL }}
redeem_url = "{{ .Env.REDEEM_URL }}"
{{ end }}

# profile_url = ""
{{ if .Env.PROFILE_URL }}
profile_url = "{{ .Env.PROFILE_URL }}"
{{ end }}

# resource = ""
{{ if .Env.RESOURCE }}
resource = "{{ .Env.RESOURCE }}"
{{ end }}

# validate_url = ""
{{ if .Env.VALIDATE_URL }}
validate_url = "{{ .Env.VALIDATE_URL }}"
{{ end }}

# approval_prompt = ""
{{ if .Env.APPROVAL_PROMPT }}
approval_prompt = "{{ .Env.APPROVAL_PROMPT }}"
{{ end }}

# scope = ""
{{ if .Env.SCOPE }}
scope = "{{ .Env.SCOPE }}"
{{ end }}


# github_org = ""
{{ if .Env.GITHUB_ORG }}
github_org = "{{ .Env.GITHUB_ORG }}"
{{ end }}

# github_team = ""
{{ if .Env.GITHUB_TEAM }}
github_team = "{{ .Env.GITHUB_TEAM }}"
{{ end }}


# google_groups = []
{{ if .Env.GOOGLE_GROUP }}
google_group = "{{ .Env.GOOGLE_GROUP }}"
{{ end }}

# google_admin_email = ""
{{ if .Env.GOOGLE_ADMIN_EMAIL }}
google_admin_email = "{{ .Env.GOOGLE_ADMIN_EMAIL }}"
{{ end }}

# google_service_account_json = ""
{{ if .Env.GOOGLE_SERVICE_ACCOUNT_JSON }}
google_service_account_json = "{{ .Env.GOOGLE_SERVICE_ACCOUNT_JSON }}"
{{ end }}


# display_htpasswd_form = false
{{ if .Env.DISPLAY_HTPASSWD_FORM }}
display_htpasswd_form = {{ .Env.DISPLAY_HTPASSWD_FORM }}
{{ end }}


# footer = ""
{{ if .Env.FOOTER }}
footer = "{{ .Env.FOOTER }}"
{{ end }}
